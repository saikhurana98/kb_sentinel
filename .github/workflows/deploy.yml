name: Deploy KB Sentinel

on:
  push:
    branches: [ main ] 
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  DEPLOY_PATH: /home/kb-sentinel/kb_sentinel
  BACKUP_PATH: /home/kb-sentinel/backups
  SERVICE_NAME: kb-sentinel
  LOG_FILE: /tmp/kb-sentinel-deploy.log

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync

    - name: Show Directory
      run: pwd

    - name: List Files
      run: ls -la

    - name: Run syntax check
      run: |
        # Simple syntax check without importing the module
        .venv/bin/python3 -m py_compile kb_sentinel.py
        echo "‚úÖ Python syntax check passed"
    
    - name: Check imports availability
      run: |
        # Check if required packages are available (but don't import kb_sentinel itself)
        .venv/bin/python3 -c "
        try:
            import evdev
            import paho.mqtt.client
            import asyncio
            import os
            from pathlib import Path
            print('‚úÖ All required packages are available')
        except ImportError as e:
            print(f'‚ùå Missing required package: {e}')
            exit(1)
        " || exit 1
    
    - name: Validate service files
      run: |
        # Check systemd service file syntax
        if command -v systemd-analyze >/dev/null 2>&1; then
          systemd-analyze verify contrib/kb-sentinel.service
        else
          echo "‚ö†Ô∏è systemd-analyze not available in CI, skipping service validation"
        fi
        
        # Check shell scripts syntax
        bash -n contrib/install-service.sh
        bash -n contrib/uninstall-service.sh
        bash -n contrib/health-check.sh
        bash -n contrib/fix-service.sh
        echo "‚úÖ Shell script syntax check passed"

  deploy:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for better diff detection
    
    - name: Deploy to local target
      id: deploy
      run: |
        echo "üöÄ Starting local deployment..."
        
        # Copy deployment script to target (using local network)
        scp .github/scripts/deploy.sh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
        
        # Execute deployment on target host
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
          chmod +x /tmp/deploy.sh
          /tmp/deploy.sh "${{ github.sha }}" "${{ github.ref_name }}"
        ' 2>&1 | tee deployment.log
        
        # Check if deployment was successful
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment completed successfully"
        else
          echo "deployment_status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Deployment failed"
        fi
    
    - name: Upload deployment logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: deployment-logs-${{ github.sha }}
        path: deployment.log
        retention-days: 30
    
    - name: Report deployment failure
      if: steps.deploy.outputs.deployment_status == 'failed'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let logContent = '';
          try {
            logContent = fs.readFileSync('deployment.log', 'utf8');
          } catch (error) {
            logContent = 'Could not read deployment log';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number || 1,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üö® Deployment Failed
          
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Workflow:** ${context.workflow}
          
          ### Deployment Log:
          \`\`\`
          ${logContent.slice(-2000)} // Last 2000 chars
          \`\`\`
          
          The deployment has been automatically rolled back to the previous version.
          
          Please check the logs and fix the issues before attempting to deploy again.`
          });
    
    - name: Fail workflow on deployment failure
      if: steps.deploy.outputs.deployment_status == 'failed'
      run: exit 1

  health-check:
    needs: deploy
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Run post-deployment health check
      run: |
        echo "üè• Running post-deployment health check..."
        
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
          cd ${{ env.DEPLOY_PATH }}
          
          # Wait a moment for service to stabilize
          sleep 10
          
          # Run health check
          if [ -f contrib/health-check.sh ]; then
            chmod +x contrib/health-check.sh
            ./contrib/health-check.sh
          else
            echo "Health check script not found, running basic checks..."
            systemctl --user status kb-sentinel.service
          fi
        '